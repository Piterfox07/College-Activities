// 1 - Declare an array of 10 integers, read a value for each position, and at the end, show the average,
// the smallest and the largest value contained in the array.

#include <iostream>
using namespace std;

#define SIZE 10

int main() {
    
    int arr[SIZE], i, largest, smallest, sum = 0;
    
    for (i = 0; i < SIZE; i++) {
        cout << "Enter value " << i + 1 << ": ";
        cin >> arr[i];
        sum += arr[i];
    }
    
    largest = arr[0];
    smallest = arr[0];
    
    for (i = 1; i < SIZE; i++) {
        if (arr[i] > largest) {
            largest = arr[i];
        } else if (arr[i] < smallest) {
            smallest = arr[i];
        }
    }
    
    float average = static_cast<float>(sum) / SIZE;
    
    cout << "\nThe average is: " << average 
         << "\nThe largest number is: " << largest 
         << "\nThe smallest number is: " << smallest;

    return 0;
}

// 2 - Calculate the average of the grades of 10 students in a subject and determine the number of students
// who scored above the calculated average.

int main() {
    
    int grades[SIZE], aboveAverageCount = 0;
    float average = 0;
    
    for (int i = 0; i < SIZE; i++) {
        cout << "Enter the grade of student " << i + 1 << ": ";
        cin >> grades[i];
        average += grades[i];
    }

    average /= SIZE;
    
    for (int i = 0; i < SIZE; i++) {
        if (grades[i] > average) {
            aboveAverageCount++;
        }
    }
    
    cout << "The average was: " << average 
         << "\nThe number of students with grades above average was: " << aboveAverageCount;

    return 0;
}

// 3 - Declare an array of 5 integers, read a value for each position and at the end show how many
// elements are greater, smaller, and equal to the first element of the array.

#include <iostream>
using namespace std;

#define SIZE 5

int main() {
    
    int arr[SIZE], greater = 0, smaller = 0, equal = 0;
    
    for (int i = 0; i < SIZE; i++) {
        cout << "Enter value " << i + 1 << ": ";
        cin >> arr[i];
    }
    
    for (int i = 1; i < SIZE; i++) {
        if (arr[i] > arr[0]) {
            greater++;
        } else if (arr[i] < arr[0]) {
            smaller++;
        } else {
            equal++;
        }
    }
    
    cout << "The number of elements greater than the first number was: " << greater 
         << "\nThe number of elements smaller than the first number was: " << smaller 
         << "\nThe number of elements equal to the first was: " << equal;

    return 0;
}

// 4 - Declare an array of 10 integers, read a value for each position and at the end show the
// elements of this array in reverse order from which they were assigned.

#include <iostream>
using namespace std;

#define SIZE 10

int main() {
    
    int arr[SIZE];
    
    for (int i = 0; i < SIZE; i++) {
        cout << "Enter value " << i + 1 << ": ";
        cin >> arr[i];
    }
    
    for (int i = SIZE - 1; i >= 0; i--) {
        cout << arr[i] << endl;
    }

    return 0;
}

// 5 - Read two arrays A and B with twenty elements. Construct a third array C, where each
// element is the subtraction of the corresponding element of A with B.

#include <iostream>
using namespace std;

#define SIZE 20

int main() {
    
    float arrA[SIZE], arrB[SIZE], arrC[SIZE];
    
    for (int i = 0; i < SIZE; i++) {
        cout << "Enter value " << i + 1 << " for array A: ";
        cin >> arrA[i];
    }
    for (int i = 0; i < SIZE; i++) {
        cout << "Enter value " << i + 1 << " for array B: ";
        cin >> arrB[i];
    }
    
    for (int i = 0; i < SIZE; i++) {
        arrC[i] = arrA[i] - arrB[i];
        cout << "Value " << i + 1 << " of array C: " << arrC[i] << endl;
    }

    return 0;
}

// 11 - Write a program that fills a 5x5 matrix with the element one in all positions.

#include <iostream>
using namespace std;

#define SIZE 5

int main() {
    
    int matrix[SIZE][SIZE], row, column;
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            matrix[row][column] = 1;
        }
    }
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            cout << matrix[row][column] << "\t";
        }
        cout << endl;
    }
    
    return 0;
}

// 12 - Write a program that fills a 5x5 matrix with the element one in all positions 
// where the row index is equal to the column index.

#include <iostream>
using namespace std;

#define SIZE 5

int main() {
    
    int matrix[SIZE][SIZE] = {0}, row, column;
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            if (row == column) {
                matrix[row][column] = 1;
            }
        }
    }
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            cout << matrix[row][column] << "\t";
        }
        cout << endl;
    }
    
    return 0;
}

// 13 - Write a program that prompts the user for 25 real values and stores them in a 5x5 matrix. 
// Then replace all elements in the matrix that are greater than 100 with the value zero. 
// Display the original and modified matrices.

#include <iostream>
using namespace std;

#define SIZE 5

int main() {
    
    int matrix[SIZE][SIZE] = {0}, row, column;
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            cout << "Enter the number for row " << row + 1 << " and column " << column + 1 << ": ";
            cin >> matrix[row][column];
        }
    }
    
    cout << "Modified matrix: \n\n";

    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            if (matrix[row][column] > 100) {
                cout << 0 << "\t";
            } else { 
                cout << matrix[row][column] << "\t";
            }
        }
        cout << endl;
    }
    
    cout << endl << endl;
    cout << "Original matrix: \n\n";

    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            cout << matrix[row][column] << "\t";
        }
        cout << endl;
    }
    
    return 0;
}

// 14 - Write a program that fills a 5x5 matrix with the element one in all positions 
// where the row index is greater than the column index.

#include <iostream>
using namespace std;

#define SIZE 5

int main() {
    
    int matrix[SIZE][SIZE] = {0}, row, column;
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            if (row > column) {
                matrix[row][column] = 1;
            }
        }
    }

    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            cout << matrix[row][column] << "\t";
        }
        cout << endl;
    }
    
    return 0;
}

// 15 - Write a program that reads a 4x4 matrix and then calculates the sum of all
// elements contained in the main diagonal. Display the result.

#include <iostream>
using namespace std;

#define SIZE 4

int main() {
    
    int matrix[SIZE][SIZE], row, column, sum = 0;
    
    for (row = 0; row < SIZE; row++) {
        for (column = 0; column < SIZE; column++) {
            cout << "Enter the number for row " << row + 1 << " and column " << column + 1 << ": ";
            cin >> matrix[row][column];
            if (row == column) {
                sum += matrix[row][column];
            }
        }
    }
    
    cout << endl << "The sum of the numbers on the main diagonal is: " << sum;
    
    return 0;
}
